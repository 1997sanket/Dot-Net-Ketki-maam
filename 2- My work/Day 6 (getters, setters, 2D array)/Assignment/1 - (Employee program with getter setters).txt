using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



namespace Practice_VS_2012
{

    class Employee
    {
        private int id;
        //private String name;  dont need this we are using Auto implement property
        private double salary;
        private double netSalary;

        private static int _id = 0; //static because, we need to calculate this for every Employee created
        private static readonly double TDS; //static because common to all Employees,  readonly because we are initializing it in static constructor
        private const double maxSalary = 80000; //const because we know value at Compile time, it is also static
        private const int maxEmployees = 3;

        static Employee()
        {
            Console.WriteLine("Welcome to our Company :) ");
            TDS = 0.1;
        }


        //Cannot create more than 3 objects 
        public Employee(String name, double salary)
        {

            //If 3 employees are created, then don't create anymore
            if (_id == maxEmployees)
            {
                //Console.WriteLine();
                throw new Exception("Only 3 employees can be created");
            }
            else //Create new Employee  
            {
                _id++;  //Create ID

                //Call setter of salary and verify there, if salary is OK then call setter for other properties
                Salary = salary;

                //Call Setter for name
                Name = name;

                //Give ID
                id = _id;
                
            }
        }

        //ID is read only
        public int ID
        {
            get { return id; }

        }


        //Getter setter for name using Auto implement property (So we don't have to even provide instance member)
        public String Name
        {
            set;
            get;
        }


        //Getter setter for Salary
        public double Salary
        {
            set
            {


                //Salary of employee cannot be more than 50000
                if (value > maxSalary) throw new Exception("Salary cannot be greated than 80000");

                else if (value <= 0) throw new Exception("Salary should be a positive number"); 

                else
                {
                    salary = value;
                    calcNetSalary(salary);  //ALso calculate net salary
                }
            


            }

            get { return salary; }

        }


        //Read only property for netSalary
        public double Net_Salary
        {
            get { return netSalary; }
        }


        private void calcNetSalary(double salary)
        {
            netSalary = salary - TDS;
        }


        public void display()
        {
            Console.WriteLine("Id : {0}    Name : {1}   NetSalary : {2} ", id, Name, netSalary);    //Here "Name" calls getter 
        }

    }



    //Main class
    public class Program
    {


        static void Main(string[] args)
        {
            Employee e1 = new Employee("Sanket", 50000);
            Employee e2 = new Employee("Martin", 40000);
            Employee e3 = new Employee("Shrikant", 30000);


            e1.display();


            Console.WriteLine();

            //Set salary for sanket
            e1.Salary =  80000;

            e1.display();


            Console.ReadLine();

        }
    }
}

// Use a Semaphore 
  
using System;  
using System.Threading;  
 
// This thread allows only two instances of itself 
// to run at any one time. 
class MyThread {  
  public Thread Thrd; 
 
  // This creates a semaphore that allows up to 2 
  // permits to be granted and that initially has 
  // two permits available. 
  static Semaphore sem = new Semaphore(2, 2); 
  
  public MyThread(string name) {  
    Thrd = new Thread(this.Run);  
    Thrd.Name = name;  
    Thrd.Start();  
  }  
  
  // Entry point of thread.  
  void Run() {  
 
    Console.WriteLine(Thrd.Name + " is waiting for a permit."); 
 
    sem.WaitOne(); 
 
    Console.WriteLine(Thrd.Name + " acquires a permit."); 
 
    for(char ch='A'; ch < 'D'; ch++) { 
      Console.WriteLine(Thrd.Name + " : " + ch + " "); 
      Thread.Sleep(500);  
    } 
  
    Console.WriteLine(Thrd.Name + " releases a permit."); 
 
    // Release the semaphore. 
    sem.Release(); 
  }  
}  
 
  
class SemaphoreDemo {  
  static void Main() {  
 
    // Construct three threads.  
    MyThread mt1 = new MyThread("Thread #1");  
    MyThread mt2 = new MyThread("Thread #2");  
    MyThread mt3 = new MyThread("Thread #3");  
  
    mt1.Thrd.Join(); 
    mt2.Thrd.Join(); 
    mt3.Thrd.Join(); 
  }  
}
